extends: spectral:oas
functionsDir: './functions'
functions:
  - consistent-response-body
  - error-response
  - has-header
  - lro-response-schema
  - naming-convention
  - operation-id
  - pagination-parameters
  - operation-security
  - pagination-response
  - param-names
  - param-names-unique
  - param-order
  - patch-content-type
  - path-param-schema
  - path-param-names
  - put-request-and-response-body
  - property-default-not-allowed
  - readonly-in-response-schema
  - security-definitions
  - security-requirements
  - schema-type-and-format
  - unused-definition
  - version-policy
rules:
  info-contact: off
  no-$ref-siblings: off
  oas2-api-host: off
  oas2-api-schemes: off
  oas2-unused-definition: off
  openapi-tags: off
  operation-description: off
  operation-tags: off
  operation-tag-defined: off

  # Note: The Spectral VSCode extension will not display "hint" messages, so
  # use "info" rather than "hint".

  az-boolean-naming-convention:
    description: Do not use "is" prefix in names of boolean values
    severity: warn
    formats: ['oas2','oas3']
    given: $
    then:
      function: naming-convention
      functionOptions:
        type: boolean
        notMatch: '^is[A-Z]'

  az-parameter-default-not-allowed:
    description: A required parameter should not specify a default value.
    severity: warn
    # oas3 support has broken - restrict to oas2 for now
    formats: ['oas2']
    given:
    - $.paths[*].parameters.[?(@.required)]
    - $.paths.*[get,put,post,patch,delete,options,head].parameters.[?(@.required)]
    then:
      field: default
      function: falsy

  az-parameter-description:
    description: All parameters should have a description.
    message: Parameter should have a description.
    severity: warn
    # In oas3 the description might be within the schema -- should not flag those
    formats: ['oas2']
    given:
    - $.paths[*].parameters.*
    - $.paths.*[get,put,post,patch,delete,options,head].parameters.*
    then:
      field: description
      function: truthy
      
  az-parameter-names-unique:
    description: All parameter names for an operation should be case-insensitive unique.
    message: '{{error}}'
    severity: warn
    formats: ['oas2', 'oas3']
    given: $.paths[*]
    then:
      function: param-names-unique

  az-parameter-order:
    description: Path parameters must be in the same order as in the path.
    message: '{{error}}'
    severity: warn
    formats: ['oas2', 'oas3']
    given: $.paths
    then:
      function: param-order

  # Static path segments should be kebab-case
  az-path-case-convention:
    description: Static path segments should be kebab-case.
    message: Static path segments should be kebab-case.
    severity: info
    formats: ['oas2', 'oas3']
    given: $.paths.*~
    then:
      function: pattern
      functionOptions:
        # Check each path segment individually and ignore param segments
        # Note: the ':' is only allowed in the final path segment
        match: '^(\/([a-z][a-z0-9-]+|{[^}]+}))*\/([a-z][a-z0-9-]+|{[^}]*})?(:[A-Za-z0-9]+)?$'

  # DO limit your URLs characters to 0-9 A-Z a-z - . _ ~ :
  az-path-characters:
    description: Path should contain only recommended characters.
    message: Path contains non-recommended characters.
    severity: info
    formats: ['oas2', 'oas3']
    given: $.paths.*~
    then:
      function: pattern
      functionOptions:
        # Check each path segment individually and ignore param segments
        # Note: the ':' is only allowed in the final path segment
        match: '^(\/([0-9A-Za-z._~-]+|{[^}]+}))*\/([0-9A-Za-z._~-]+|{[^}]*})?(:[0-9A-Za-z._~-]+)?$'

  az-path-parameter-names:
    description: Path parameter names should be consistent across all paths.
    message: '{{error}}'
    severity: warn
    formats: ['oas2', 'oas3']
    given: $.paths
    then:
      function: path-param-names

  az-property-default-not-allowed:
    description: A required property should not specify a default value.
    message: '{{error}}'
    severity: warn
    formats: ['oas2']
    given:
    - $.paths[*].[put,post,patch].parameters.[?(@.in == 'body')].schema
    - $.paths[*].[get,put,post,patch,delete].responses[*].schema
    then:
      function: property-default-not-allowed

  az-property-description:
    description: All schema properties should have a description.
    message: Property should have a description.
    severity: warn
    resolved: false
    given: $..properties[?(@object() && @.$ref == undefined)]
    then:
      field: description
      function: truthy

  az-property-type:
    description: All schema properties should have a defined type.
    message: Property should have a defined type.
    severity: warn
    resolved: false
    # Exclude properties that contains allOf or oneOf or anyOf to avoid false positives.
    given: $..properties[?(@object() && @.$ref == undefined && @.allOf == undefined && @.oneOf == undefined && @.anyOf == undefined)]
    then:
      field: type
      function: truthy

  az-schema-names-convention:
    description: Schema names should be Pascal case.
    message: Schema name should be Pascal case.
    severity: info
    formats: ['oas2']
    given: $.definitions.*~
    then:
      # Pascal case with optional "." separator
      function: pattern
      functionOptions:
        match: '^([A-Z][a-z0-9]+\.?)*[A-Z][a-z0-9]+$'

  az-schema-type-and-format:
    description: Schema should use well-defined type and format.
    message: '{{error}}'
    severity: warn
    formats: ['oas2']
    given:
    - $.paths[*].[put,post,patch].parameters.[?(@.in == 'body')].schema
    - $.paths[*].[get,put,post,patch,delete].responses[*].schema
    then:
      function: schema-type-and-format
