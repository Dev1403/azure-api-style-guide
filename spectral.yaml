extends: spectral:oas
functionsDir: './functions'
functions:
  - az-paths-kebab-case
  - az-path-parameters-camelCase-alphanumeric
  - az-request-GET-no-body
  - az-headers-no-x-headers
  - az-headers-hyphenated-pascal-case
  - az-request-support-json
  - az-valid-example-in-parameters
  - az-valid-example-in-definitions
  - az-default-response
  - az-parameter-description
  - az-parameter-order
  - az-path-case-convention
  - az-path-parameter-names
  - az-property-default-not-allowed
  - az-property-description

rules:
  info-contact: off
  no-$ref-siblings: off
  oas2-api-host: off
  oas2-api-schemes: off
  oas2-unused-definition: off
  openapi-tags: off
  operation-description: off
  operation-tags: off
  operation-tag-defined: off

  # Note: The Spectral VSCode extension will not display "hint" messages, so
  # use "info" rather than "hint".


  az-paths-kebab-case:
    description: All YAML/JSON paths MUST follow kebab-case
    severity: warn
    recommended: true
    message: "{{property}} is not kebab-case: {{error}}"
    given: $.paths[*]~
    then:
      function: pattern
      functionOptions:
        match: "^\/([a-z0-9]+(-[a-z0-9]+)*)?(\/[a-z0-9]+(-[a-z0-9]+)*|\/{.+})*$" # doesn't allow /asasd{asdas}sadas pattern or not closed braces

  az-path-parameters-camelCase-alphanumeric:
    description: Path parameters MUST follow camelCase
    severity: warn
    recommended: true
    message: "{{property}} path parameter is not camelCase: {{error}}"
    given: $..parameters[?(@.in == 'path')].name
    then:
      function: pattern
      functionOptions:
        match: "^[a-z][a-zA-Z0-9]+$"

  az-request-GET-no-body:
    description: "A 'GET' request MUST NOT accept a 'body` parameter"
    severity: error
    given: $.paths..get.parameters..in
    then:
      function: pattern
      functionOptions:
        notMatch: "/^body$/"

  az-headers-no-x-headers:
    description: "All 'HTTP' headers SHOULD NOT include 'X-' headers (https://tools.ietf.org/html/rfc6648)."
    severity: warn
    given: "$..parameters[?(@.in == 'header')].name"
    message: "HTTP headers SHOULD NOT include 'X-' prefix."
    recommended: true
    type: style
    then: 
      function: pattern
      functionOptions:
        notMatch: "/^(x|X)-/"

  az-headers-hyphenated-pascal-case:
    description: All `HTTP` headers MUST use `Hyphenated-Pascal-Case` notation
    severity: error
    given: "$..parameters[?(@.in == 'header')].name"
    message: "'HTTP' headers MUST follow 'Hyphenated-Pascal-Case' notation"
    recommended: true
    type: style
    then: 
      function: pattern
      functionOptions:
        match: "/^([A-Z][a-z0-9]-)*([A-Z][a-z0-9])+/"

  az-request-support-json:
    description: Every request MUST support `application/json` media type
    formats:
      - oas3
    recommended: true
    severity: error
    message: "{{description}}: {{error}}"
    given: $.paths.[*].requestBody.content[?(@property.indexOf('json') === -1)]^
    then:
      function: falsy

  az-valid-example-in-parameters:
    description: Examples must be valid against their defined schema.
    message: "{{error}}"
    recommended: true
    formats:
      - oas3
    severity: 0
    type: validation
    given: "$..parameters..[?(@.in == 'body')]..[?(@property !== 'properties' && @.example
      && ( @.type || @.format || @.$ref ))]"
    then:
      function: schemaPath
      functionOptions:
        field: example
        schemaPath: "$"

  az-valid-example-in-definitions:
    description: Examples must be valid against their defined schema.
    message: "{{error}}"
    recommended: true
    formats:
      - oas3
    severity: 0
    type: validation
    given: "$..definitions..[?(@property !== 'properties' && @.example && (@.type ||
      @.format || @.$ref))]"
    then:
      function: schemaPath
      functionOptions:
        field: example
        schemaPath: "$"
  
  az-default-response:
    description: All operations should have a default (error) response.
    message: Operation is missing a default response.
    severity: warn
    given: $.paths.*.*.responses
    then:
      field: default
      function: truthy
      
  az-parameter-description:
    description: All parameters should have a description.
    message: Parameter should have a description.
    severity: warn
    # In oas3 the description might be within the schema -- should not flag those
    formats: ['oas2']
    given:
    - $.paths[*].parameters.*
    - $.paths.*[get,put,post,patch,delete,options,head].parameters.*
    then:
      field: description
      function: truthy
      
  az-parameter-order:
    description: Path parameters must be in the same order as in the path.
    message: '{{error}}'
    severity: warn
    formats: ['oas2', 'oas3']
    given: $.paths
    then:
      function: param-order
  
  az-path-case-convention:
    description: Static path segments should be kebab-case.
    message: Static path segments should be kebab-case.
    severity: info
    formats: ['oas2', 'oas3']
    given: $.paths.*~
    then:
      function: pattern
      functionOptions:
        # Check each path segment individually and ignore param segments
        # Note: the ':' is only allowed in the final path segment
        match: '^(\/([a-z][a-z0-9-]+|{[^}]+}))*\/([a-z][a-z0-9-]+|{[^}]*})?(:[A-Za-z0-9]+)?$'
# DO limit our URLs characters to 0-9 A-Z a-z - . _ ~ : We can work together to include more chars if needed.
  
  az-path-parameter-names:
    description: Path parameter names should be consistent across all paths.
    message: '{{error}}'
    severity: warn
    formats: ['oas2', 'oas3']
    given: $.paths
    then:
      function: path-param-names
  
  az-property-default-not-allowed:
    description: A required property should not specify a default value.
    message: '{{error}}'
    severity: warn
    formats: ['oas2']
    given:
    - $.paths[*].[put,post,patch].parameters.[?(@.in == 'body')].schema
    - $.paths[*].[get,put,post,patch,delete].responses[*].schema
    then:
      function: property-default-not-allowed
  
  az-property-description:
    description: All schema properties should have a description.
    message: Property should have a description.
    severity: warn
    resolved: false
    given: $..properties[?(@object() && @.$ref == undefined)]
    then:
      field: description
      function: truthy
